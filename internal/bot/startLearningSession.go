package bot

import (
	"strconv"

	tele "gopkg.in/telebot.v4"
)

// startLearningSession - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
// –æ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ –∫–∞–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Å–ª–æ–≤, —Ç–∞–∫ –∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ
//
// –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
//
//	c - –∫–æ–Ω—Ç–µ–∫—Å—Ç telebot, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ.
//	isRepeat - –±—É–ª–µ–≤—ã–π —Ñ–ª–∞–≥; –µ—Å–ª–∏ true, —Å–µ—Å—Å–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ "–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"
func (b *Bot) startLearningSession(c tele.Context, isRepeat bool) error {
	// –ø–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	userID := c.Sender().ID

	// –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
	words, exists := b.UserWords[userID]
	if !exists || len(words) == 0 {
		return c.Send("–£ –≤–∞—Å –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é /add")
	}

	// –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ–Ω–∏ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –±—ã–ª–∏ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
	shuffled := shuffleWords(words)

	// —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è
	session := LearningSession{
		UserID:       userID,
		Words:        shuffled,
		CurrentIndex: 0,    // –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞ (–∏–Ω–¥–µ–∫—Å 0)
		Score:        0,    // –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π —Å—á–µ—Ç —Ä–∞–≤–µ–Ω 0
		IsActive:     true, // –ø–æ–º–µ—á–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—É—é
	}

	// —Å–æ—Ö—Ä–∞–Ω—è–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –≤ –∫–∞—Ä—Ç—É –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –±–æ—Ç–∞.
	// –∫–ª—é—á–æ–º —è–≤–ª—è–µ—Ç—Å—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	b.LearningSession[userID] = &session

	if isRepeat {
		c.Send("üîÅ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–ª–æ–≤.")
	} else {
		start := strconv.Itoa(len(shuffled))
		c.Send("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ! –°–ª–æ–≤: " + start)
	}

	// –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
	getWord := session.Words[0].Original

	// –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
	return c.Send(getWord)
}
